[Kwlan-223251:Albatross4 KimSeheon$ echo "# Albatross4Viewer" >> README.md
]0;~/ActivityPriority/Albatross4wlan-223251:Albatross4 KimSeheon$ git init
Reinitialized existing Git repository in /Users/KimSeheon/ActivityPriority/Albatross4/.git/
]0;~/ActivityPriority/Albatross4wlan-223251:Albatross4 KimSeheon$ git add README.md
]0;~/ActivityPriority/Albatross4wlan-223251:Albatross4 KimSeheon$ git commit -m "first commit"
[master 3f5135e] first commit
 Committer: KimSeheon <KimSeheon@wlan-223251.nbw.tue.nl>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:

    git config --global user.name "Your Name"
    git config --global user.email you@example.com

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 1 file changed, 1 insertion(+)
]0;~/ActivityPriority/Albatross4wlan-223251:Albatross4 KimSeheon$ git remote add origin https://github.com/tpgjs66/Albatross4Viewer.git
fatal: remote origin already exists.
]0;~/ActivityPriority/Albatross4wlan-223251:Albatross4 KimSeheon$ git push -u origin master
remote: Repository not found.
fatal: repository 'https://github.com/tpgjs66/AlbatrossViewer.git/' not found
]0;~/ActivityPriority/Albatross4wlan-223251:Albatross4 KimSeheon$ git remote add origin https://github.com/tpgjs66/Albatross4Viewer.git
fatal: remote origin already exists.
]0;~/ActivityPriority/Albatross4wlan-223251:Albatross4 KimSeheon$ git push -u origin master
remote: Repository not found.
fatal: repository 'https://github.com/tpgjs66/AlbatrossViewer.git/' not found
]0;~/ActivityPriority/Albatross4wlan-223251:Albatross4 KimSeheon$ git
usage: git [--version] [--help] [-C <path>] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
git
usage: git [--version] [--help] [-C <path>] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
]0;~/ActivityPriority/Albatross4wlan-223251:Albatross4 KimSeheon$ git commit
On branch master
Your branch is ahead of 'origin/master' by 2 commits.
  (use "git push" to publish your local commits)
Changes not staged for commit:
	[31mmodified:   .DS_Store[m

Untracked files:
	[31m.Rapp.history[m
	[31m2018-05-07-mapRouteInd.html[m
	[31mPC6.R[m
	[31mgps_cooords.R[m
	[31mpc6.csv[m
	[31mroute.R[m

no changes added to commit
]0;~/ActivityPriority/Albatross4wlan-223251:Albatross4 KimSeheon$ git commit -m "first commit"se[K[K[C[C[1P commit"[1P commit"[1P commit"[1P commit"[1P commit"s commit"o commit"[1P commit"e commit"c commit"o commit"n commit"d commit"
On branch master
Your branch is ahead of 'origin/master' by 2 commits.
  (use "git push" to publish your local commits)
Changes not staged for commit:
	[31mmodified:   .DS_Store[m

Untracked files:
	[31m.Rapp.history[m
	[31m2018-05-07-mapRouteInd.html[m
	[31mPC6.R[m
	[31mgps_cooords.R[m
	[31mpc6.csv[m
	[31mroute.R[m

no changes added to commit
]0;~/ActivityPriority/Albatross4wlan-223251:Albatross4 KimSeheon$ git push
remote: Repository not found.
fatal: repository 'https://github.com/tpgjs66/AlbatrossViewer.git/' not found
]0;~/ActivityPriority/Albatross4wlan-223251:Albatross4 KimSeheon$ cd ..
]0;~/ActivityPrioritywlan-223251:ActivityPriority KimSeheon$ cd Albatrosa[Ks4Viewre[K[Ker
]0;~/ActivityPriority/Albatross4Viewerwlan-223251:Albatross4Viewer KimSeheon$ echo "# Albatross4Viewer" >> README.md
]0;~/ActivityPriority/Albatross4Viewerwlan-223251:Albatross4Viewer KimSeheon$ git init
Reinitialized existing Git repository in /Users/KimSeheon/ActivityPriority/Albatross4Viewer/.git/
]0;~/ActivityPriority/Albatross4Viewerwlan-223251:Albatross4Viewer KimSeheon$ git add README.md
]0;~/ActivityPriority/Albatross4Viewerwlan-223251:Albatross4Viewer KimSeheon$ git commit -m "first commit"
[master (root-commit) dc3a62d] first commit
 Committer: KimSeheon <KimSeheon@wlan-223251.nbw.tue.nl>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:

    git config --global user.name "Your Name"
    git config --global user.email you@example.com

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 1 file changed, 1 insertion(+)
 create mode 100644 README.md
]0;~/ActivityPriority/Albatross4Viewerwlan-223251:Albatross4Viewer KimSeheon$ git remote add origin https://github.com/tpgjs66/Albatross4Viewer.git
]0;~/ActivityPriority/Albatross4Viewerwlan-223251:Albatross4Viewer KimSeheon$ git push -u origin master
Counting objects: 3, done.
Writing objects:  33% (1/3)   Writing objects:  66% (2/3)   Writing objects: 100% (3/3)   Writing objects: 100% (3/3), 240 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/tpgjs66/Albatross4Viewer.git
 * [new branch]      master -> master
Branch master set up to track remote branch master from origin.
]0;~/ActivityPriority/Albatross4Viewerwlan-223251:Albatross4Viewer KimSeheon$ git commit
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
	[31m.DS_Store[m
	[31m.Rhistory[m
	[31m.Rproj.user/[m
	[31mAlbatross4Viewer.Rproj[m
	[31mdata/[m
	[31mrsconnect/[m
	[31mserver.R[m
	[31mui.R[m
	[31mwww/[m

nothing added to commit but untracked files present
]0;~/ActivityPriority/Albatross4Viewerwlan-223251:Albatross4Viewer KimSeheon$ gid add .
bash: gid: command not found
]0;~/ActivityPriority/Albatross4Viewerwlan-223251:Albatross4Viewer KimSeheon$ git add.
git: 'add.' is not a git command. See 'git --help'.

Did you mean this?
	add
]0;~/ActivityPriority/Albatross4Viewerwlan-223251:Albatross4Viewer KimSeheon$ git add .
